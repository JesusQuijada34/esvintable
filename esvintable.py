#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# esVintable Ultimate PRO - Multiplataforma
# Autor: @JesusQuijada34 | GitHub.com/JesusQuijada34/esvintable
# √öltima actualizaci√≥n: 2025-09-17

import os
import sys
import platform
import subprocess
import re
import time
import json
import requests
import hashlib
import xml.etree.ElementTree as ET
from datetime import datetime
from pathlib import Path
from urllib.parse import urlparse
from threading import Thread, Event
import cloudscraper

# ===== CONFIGURACI√ìN GLOBAL =====
# Versi√≥n inicial - ser√° actualizada desde XML
VERSION = "4.5"
REPO_RAW_URL = "https://raw.githubusercontent.com/JesusQuijada34/esvintable/main/"
SCRIPT_FILENAME = "esvintable.py"
DETAILS_XML_URL = f"{REPO_RAW_URL}details.xml"
UPDATE_INTERVAL = 60  # Segundos entre verificaciones de actualizaci√≥n
CONFIG_FILE = "esvintable_config.json"

# Proveedores de m√∫sica para b√∫squeda ISRC
PROVIDERS = [
    'Warner', 'Orchard', 'SonyMusic', 'UMG', 'INgrooves', 'Fuga', 'Vydia', 'Empire',
    'LabelCamp', 'AudioSalad', 'ONErpm', 'Symphonic', 'Colonize'
]

TOKEN = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiIxODkyNDQ0MDEiLCJkZXZpY2VJZCI6IjE1NDAyNjIyMCIsInRyYW5zYWN0aW9uSWQiOjAsImlhdCI6MTc0Mjk4ODg5MX0.Cyj5j4HAmRZpCXQacS8I24p5_hWhIqPdMqb_NVKS4mI"

# ===== DETECCI√ìN DE PLATAFORMA =====
IS_WINDOWS = platform.system() == "Windows"
IS_LINUX = platform.system() == "Linux"
IS_MAC = platform.system() == "Darwin"
IS_TERMUX = "com.termux" in os.environ.get('PREFIX', '')
IS_PYDROID = "ru.iiec.pydroid3" in os.environ.get('PREFIX', '')
PLATFORM_LABEL = (
    "Windows" if IS_WINDOWS else
    "macOS" if IS_MAC else
    "Linux-Termux" if IS_TERMUX else
    "Linux-Pydroid" if IS_PYDROID else
    "Linux" if IS_LINUX else
    "Desconocida"
)

# Formatos de audio soportados
SUPPORTED_AUDIO = ('.mp3', '.flac', '.wav', '.m4a', '.aac', '.ogg', '.opus', '.wma')

# ===== COLORES PARA TERMINAL =====
class Colors:
    RED = '\033[91m'
    GREEN = '\033[92m'
    YELLOW = '\033[93m'
    BLUE = '\033[94m'
    MAGENTA = '\033[95m'
    CYAN = '\033[96m'
    WHITE = '\033[97m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'
    END = '\033[0m'
    # Colores adicionales para mejor experiencia
    ORANGE = '\033[38;5;208m'
    PURPLE = '\033[38;5;129m'
    PINK = '\033[38;5;199m'
    LIGHT_BLUE = '\033[38;5;45m'

def color(text, color_code):
    return f"{color_code}{text}{Colors.END}"

def clear():
    os.system('cls' if IS_WINDOWS else 'clear')

# ===== SISTEMA DE ACTUALIZACI√ìN CON XML =====
class UpdateChecker:
    def __init__(self):
        self.last_check = datetime.now()
        self.update_available = False
        self.new_version = ""
        self.update_event = Event()
        self.running = True
        self.remote_version = None
        self.update_info = {}
        
    def get_remote_info_from_xml(self):
        """Obtiene informaci√≥n completa desde el archivo XML"""
        try:
            response = requests.get(DETAILS_XML_URL, timeout=10)
            if response.status_code == 200:
                root = ET.fromstring(response.content)
                
                # Extraer informaci√≥n del XML
                info = {}
                info['version'] = root.find('version').text.strip() if root.find('version') is not None else VERSION
                info['changelog'] = root.find('changelog').text.strip() if root.find('changelog') is not None else ""
                info['release_date'] = root.find('release_date').text.strip() if root.find('release_date') is not None else ""
                info['critical'] = root.find('critical').text.strip().lower() == 'true' if root.find('critical') is not None else False
                
                return info
        except Exception as e:
            print(color(f"‚ùå Error leyendo XML: {e}", Colors.RED))
        return None
    
    def compare_versions(self, local_ver, remote_ver):
        """Compara versiones en formato vX-XX.XX-XX.XX-XXXXXXX"""
        try:
            # Extraer partes num√©ricas de las versiones
            local_parts = re.findall(r'\d+', local_ver)
            remote_parts = re.findall(r'\d+', remote_ver)
            
            # Comparar cada parte num√©rica
            for i in range(min(len(local_parts), len(remote_parts))):
                if int(remote_parts[i]) > int(local_parts[i]):
                    return True
                elif int(remote_parts[i]) < int(local_parts[i]):
                    return False
            # Si todas las partes son iguales, la m√°s larga es m√°s nueva
            return len(remote_parts) > len(local_parts)
        except:
            return remote_ver > local_ver
    
    def check_for_updates(self):
        """Verifica si hay actualizaciones disponibles"""
        try:
            self.update_info = self.get_remote_info_from_xml()
            if self.update_info and 'version' in self.update_info:
                self.remote_version = self.update_info['version']
                if self.compare_versions(VERSION, self.remote_version):
                    self.update_available = True
                    self.new_version = self.remote_version
                    return True
        except Exception as e:
            print(color(f"‚ùå Error verificando actualizaciones: {e}", Colors.RED))
        return False
    
    def download_update(self):
        """Descarga la actualizaci√≥n desde el repo"""
        try:
            script_url = f"{REPO_RAW_URL}{SCRIPT_FILENAME}"
            response = requests.get(script_url, timeout=20)
            
            if response.status_code == 200:
                # Crear backup
                backup_file = f"{__file__}.backup"
                with open(backup_file, 'w', encoding='utf-8') as f:
                    with open(__file__, 'r', encoding='utf-8') as original:
                        f.write(original.read())
                
                # Escribir nueva versi√≥n
                with open(__file__, 'w', encoding='utf-8') as f:
                    f.write(response.text)
                
                return True
        except Exception as e:
            print(color(f"‚ùå Error descargando actualizaci√≥n: {e}", Colors.RED))
        return False
    
    def start_update_checker(self):
        """Inicia el verificador de actualizaciones en segundo plano"""
        def checker_thread():
            while self.running:
                try:
                    current_time = datetime.now()
                    if (current_time - self.last_check).total_seconds() >= UPDATE_INTERVAL:
                        if self.check_for_updates():
                            print(color(f"\nüéâ ¬°Nueva versi√≥n disponible! v{VERSION} ‚Üí v{self.new_version}", Colors.GREEN))
                            if self.update_info.get('critical', False):
                                print(color("üö® ACTUALIZACI√ìN CR√çTICA: Se recomienda actualizar inmediatamente", Colors.RED))
                        self.last_check = current_time
                    time.sleep(10)  # Verificar cada 10 segundos
                except Exception:
                    time.sleep(30)  # Esperar m√°s en caso de error
        
        Thread(target=checker_thread, daemon=True).start()
    
    def stop_update_checker(self):
        """Detiene el verificador de actualizaciones"""
        self.running = False

# Instancia global del verificador de actualizaciones
updater = UpdateChecker()

# ===== DEPENDENCIAS =====
def check_dependencies():
    """Verifica e instala dependencias autom√°ticamente"""
    missing_deps = []
    
    for dep in ["requests", "cloudscraper"]:
        try:
            __import__(dep)
        except ImportError:
            missing_deps.append(dep)
    
    if missing_deps:
        print(color("‚ö†Ô∏è  Instalando dependencias faltantes...", Colors.YELLOW))
        try:
            subprocess.run([sys.executable, "-m", "pip", "install"] + missing_deps, 
                         check=True, capture_output=True, timeout=300)
            print(color("‚úÖ Dependencias instaladas correctamente", Colors.GREEN))
            return True
        except subprocess.TimeoutExpired:
            print(color("‚ùå Tiempo de espera agotado instalando dependencias", Colors.RED))
            return False
        except:
            print(color("‚ùå Error instalando dependencias", Colors.RED))
            return False
    
    return True

def check_ffprobe():
    """Verifica si ffprobe est√° disponible"""
    try:
        subprocess.run(['ffprobe', '-version'], 
                      stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, timeout=10)
        return True
    except Exception:
        return False

def check_ffplay():
    """Verifica si ffplay est√° disponible (para reproducci√≥n)"""
    try:
        subprocess.run(['ffplay', '-version'], 
                      stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, timeout=10)
        return True
    except Exception:
        return False

def install_ffmpeg_tools():
    """Instala ffmpeg/ffprobe/ffplay seg√∫n la plataforma"""
    print(color("üîß Instalando herramientas FFmpeg...", Colors.YELLOW))
    
    try:
        if IS_TERMUX or IS_PYDROID:
            subprocess.run(['pkg', 'install', 'ffmpeg', '-y'], 
                          check=True, capture_output=True, timeout=300)
        elif IS_LINUX:
            if subprocess.run(['which', 'apt-get'], capture_output=True).returncode == 0:
                subprocess.run(['sudo', 'apt-get', 'install', 'ffmpeg', '-y'], 
                              check=True, timeout=300)
            elif subprocess.run(['which', 'yum'], capture_output=True).returncode == 0:
                subprocess.run(['sudo', 'yum', 'install', 'ffmpeg', '-y'], 
                              check=True, timeout=300)
        elif IS_MAC:
            subprocess.run(['brew', 'install', 'ffmpeg'], check=True, timeout=300)
        elif IS_WINDOWS:
            print(color("üì• Descarga FFmpeg para Windows desde: https://ffmpeg.org/download.html", Colors.YELLOW))
            return False
        
        print(color("‚úÖ Herramientas FFmpeg instaladas correctamente", Colors.GREEN))
        return True
    except subprocess.TimeoutExpired:
        print(color("‚ùå Tiempo de espera agotado instalando FFmpeg", Colors.RED))
        return False
    except:
        print(color("‚ùå Error instalando FFmpeg", Colors.RED))
        return False

# ===== NAVEGADOR DE ARCHIVOS =====
def file_browser(start_path="."):
    """Navegador interactivo de archivos"""
    current_path = os.path.abspath(start_path)
    
    while True:
        clear()
        print(color(f"üìÅ Navegando: {current_path}", Colors.BLUE))
        print(color("=" * 60, Colors.CYAN))
        
        # Obtener contenido del directorio
        try:
            items = os.listdir(current_path)
        except PermissionError:
            print(color("‚ùå Permiso denegado para acceder a este directorio", Colors.RED))
            time.sleep(2)
            return None
        
        directories = []
        files = []
        audio_files = []
        
        for item in items:
            item_path = os.path.join(current_path, item)
            if os.path.isdir(item_path):
                directories.append(item)
            elif os.path.isfile(item_path):
                files.append(item)
                if item.lower().endswith(SUPPORTED_AUDIO):
                    audio_files.append(item)
        
        # Mostrar directorios
        print(color("\nüìÇ DIRECTORIOS:", Colors.BOLD))
        for i, dir_name in enumerate(directories, 1):
            print(color(f"  {i:2d}. {dir_name}/", Colors.BLUE))
        
        # Mostrar archivos de audio
        print(color("\nüéµ ARCHIVOS DE AUDIO:", Colors.BOLD))
        for i, file_name in enumerate(audio_files, 1):
            print(color(f"  {i + len(directories):2d}. {file_name}", Colors.GREEN))
        
        # Mostrar otros archivos
        other_files = [f for f in files if not f.lower().endswith(SUPPORTED_AUDIO)]
        if other_files:
            print(color("\nüìÑ OTROS ARCHIVOS:", Colors.BOLD))
            for i, file_name in enumerate(other_files, 1 + len(directories) + len(audio_files)):
                print(color(f"  {i:2d}. {file_name}", Colors.WHITE))
        
        print(color("\n" + "=" * 60, Colors.CYAN))
        print("0. Volver al directorio anterior")
        print("00. Seleccionar este directorio para buscar")
        print("000. Seleccionar archivo de audio para analizar")
        print("0000. Volver al men√∫ principal")
        
        try:
            choice = input("\nSelecciona una opci√≥n: ").strip()
            
            if choice == "0":
                # Volver al directorio anterior
                current_path = os.path.dirname(current_path)
            elif choice == "00":
                # Seleccionar este directorio para buscar
                return current_path
            elif choice == "000":
                # Seleccionar archivo de audio para analizar
                file_choice = input("Introduce el n√∫mero del archivo: ").strip()
                if file_choice.isdigit():
                    idx = int(file_choice) - 1
                    if 0 <= idx < len(audio_files):
                        return os.path.join(current_path, audio_files[idx])
                    else:
                        print(color("‚ùå N√∫mero de archivo inv√°lido", Colors.RED))
                        time.sleep(1)
            elif choice == "0000":
                # Volver al men√∫ principal
                return None
            elif choice.isdigit():
                # Navegar a un directorio
                idx = int(choice) - 1
                if 0 <= idx < len(directories):
                    current_path = os.path.join(current_path, directories[idx])
                else:
                    print(color("‚ùå Opci√≥n inv√°lida", Colors.RED))
                    time.sleep(1)
            else:
                print(color("‚ùå Opci√≥n inv√°lida", Colors.RED))
                time.sleep(1)
                
        except KeyboardInterrupt:
            return None

# ===== ESCANEO PROFUNDO DE AUDIO =====
def deep_scan_audio(file_path):
    """Escaneo multiplataforma y robusto de metadatos"""
    result = {
        'file': file_path, 
        'isrc': None, 
        'artist': None, 
        'album': None, 
        'title': None, 
        'duration': None, 
        'bitrate': None,
        'size': os.path.getsize(file_path) if os.path.exists(file_path) else 0,
        'tags': {}
    }
    
    # M√©todo 1: FFprobe (metadatos est√°ndar)
    if check_ffprobe():
        try:
            proc = subprocess.run(
                ['ffprobe', '-v', 'quiet', '-print_format', 'json', '-show_format', '-show_streams', file_path],
                capture_output=True, text=True, timeout=15
            )
            if proc.returncode == 0:
                info = json.loads(proc.stdout)
                tags = info.get('format', {}).get('tags', {})
                result['tags'] = tags
                result['isrc'] = tags.get('ISRC') or tags.get('TSRC') or tags.get('isrc')
                result['title'] = tags.get('title') or tags.get('TITLE')
                result['artist'] = tags.get('artist') or tags.get('ARTIST') or tags.get('composer')
                result['album'] = tags.get('album') or tags.get('ALBUM')
                result['duration'] = float(info['format'].get('duration', 0))
                result['bitrate'] = int(info['format'].get('bit_rate', 0)) // 1000 if info['format'].get('bit_rate') else None
        except Exception:
            pass
    
    # M√©todo 2: An√°lisis hexadecimal (b√∫squeda profunda de ISRC)
    try:
        with open(file_path, 'rb') as f:
            content = f.read(1000000)  # Leer primeros MB
            
            # Patrones comunes de ISRC
            patterns = [
                br'ISRC[=:]([A-Z]{2}[A-Z0-9]{3}\d{5})',
                br'([A-Z]{2}[A-Z0-9]{3}\d{5})',
                br'isrc[=:]([A-Z]{2}[A-Z0-9]{3}\d{5})'
            ]
            
            for pattern in patterns:
                match = re.search(pattern, content, re.IGNORECASE)
                if match:
                    found_isrc = match.group(1)
                    if isinstance(found_isrc, bytes):
                        found_isrc = found_isrc.decode('utf-8', errors='ignore')
                    # Validar formato ISRC
                    if re.match(r'^[A-Z]{2}[A-Z0-9]{3}\d{5}$', found_isrc):
                        result['isrc'] = found_isrc
                        break
    except Exception:
        pass
    
    return result

# ===== B√öSQUEDA Y DESCARGA POR ISRC =====
def download_by_isrc(isrc, output_dir="descargas_isrc"):
    """Descarga una canci√≥n por su c√≥digo ISRC"""
    scraper = cloudscraper.create_scraper()
    
    print(color(f"üîç Buscando ISRC: {isrc}", Colors.CYAN))
    
    for provider in PROVIDERS:
        try:
            url = f"https://mds.projectcarmen.com/stream/download?provider={provider}&isrc={isrc}"
            headers = {"Authorization": f"Bearer {TOKEN}"}
            
            print(color(f"   Probando {provider}...", Colors.YELLOW))
            response = scraper.get(url, headers=headers, timeout=20)
            
            if response.status_code == 200:
                os.makedirs(output_dir, exist_ok=True)
                filename = os.path.join(output_dir, f"{isrc}.m4a")
                
                with open(filename, 'wb') as f:
                    f.write(response.content)
                
                print(color(f"‚úÖ Descargado: {filename}", Colors.GREEN))
                return True, filename
            elif response.status_code == 404:
                print(color(f"   ‚ùå No encontrado en {provider}", Colors.RED))
            else:
                print(color(f"   ‚ö†Ô∏è  Error {response.status_code} en {provider}", Colors.YELLOW))
                
        except requests.exceptions.Timeout:
            print(color(f"   ‚è∞ Timeout con {provider}", Colors.YELLOW))
        except requests.exceptions.ConnectionError:
            print(color(f"   üîå Error de conexi√≥n con {provider}", Colors.YELLOW))
        except Exception as e:
            print(color(f"   ‚ö†Ô∏è  Error con {provider}: {str(e)}", Colors.YELLOW))
            continue
    
    return False, None

def search_isrc_in_directory(directory, isrc_code):
    """Busca un ISRC espec√≠fico en todos los archivos de un directorio"""
    print(color(f"üîç Buscando ISRC {isrc_code} en {directory}", Colors.CYAN))
    
    found_files = []
    audio_files = []
    
    # Primero, encontrar todos los archivos de audio
    for root, _, files in os.walk(directory):
        for file in files:
            if file.lower().endswith(SUPPORTED_AUDIO):
                audio_files.append(os.path.join(root, file))
    
    # Procesar con barra de progreso
    total = len(audio_files)
    for i, file_path in enumerate(audio_files, 1):
        print(color(f"   Escaneando {i}/{total}: {os.path.basename(file_path)[:30]}...", Colors.YELLOW), end="\r")
        audio_info = deep_scan_audio(file_path)
        if audio_info['isrc'] and audio_info['isrc'].upper() == isrc_code.upper():
            found_files.append(audio_info)
    
    print()  # Nueva l√≠nea despu√©s de la barra de progreso
    return found_files

# ===== B√öSQUEDA EN SERVICIOS DE M√öSICA ALTERNATIVOS =====
def search_music_services(query, service="all"):
    """Busca en m√∫ltiples servicios de m√∫sica"""
    results = {}
    
    print(color(f"üîç Buscando '{query}' en servicios de m√∫sica...", Colors.CYAN))
    
    # Simulaci√≥n de b√∫squeda en varios servicios
    services = ["Deezer", "SoundCloud", "Bandcamp", "Internet Archive"]
    
    for svc in services:
        print(color(f"   Buscando en {svc}...", Colors.YELLOW))
        time.sleep(0.5)  # Simular tiempo de b√∫squeda
        # En una implementaci√≥n real, aqu√≠ se conectar√≠a a las APIs de estos servicios
        results[svc.lower()] = [f"Resultado 1 de {svc}", f"Resultado 2 de {svc}"]
    
    return results

# ===== FILTRADO DE CANCIONES =====
def filter_songs(directory, filters):
    """Filtrado multiplataforma por metadatos"""
    results = []
    audio_files = []
    
    # Primero, encontrar todos los archivos de audio
    for root, _, files in os.walk(directory):
        for f in files:
            if f.lower().endswith(SUPPORTED_AUDIO):
                audio_files.append(os.path.join(root, f))
    
    # Procesar con barra de progreso
    total = len(audio_files)
    for i, path in enumerate(audio_files, 1):
        print(color(f"   Escaneando {i}/{total}: {os.path.basename(path)[:30]}...", Colors.YELLOW), end="\r")
        info = deep_scan_audio(path)
        match = True
        for k, v in filters.items():
            if v and (str(info.get(k, '')).lower().find(v.lower()) == -1):
                match = False
                break
        if match:
            results.append(info)
    
    print()  # Nueva l√≠nea despu√©s de la barra de progreso
    return results

def show_song(song):
    print(color(f"üìÅ Archivo: {song['file']}", Colors.BLUE))
    print(f"   üéµ {color('T√≠tulo:', Colors.BOLD)} {song.get('title', 'Desconocido')}")
    print(f"   üé§ {color('Artista:', Colors.BOLD)} {song.get('artist', 'Desconocido')}")
    print(f"   üíø {color('√Ålbum:', Colors.BOLD)} {song.get('album', 'Desconocido')}")
    print(f"   üè∑Ô∏è  {color('ISRC:', Colors.BOLD)} {color(song.get('isrc', 'No encontrado'), Colors.CYAN if song.get('isrc') else Colors.RED)}")
    print(f"   ‚è±Ô∏è  {color('Duraci√≥n:', Colors.BOLD)} {int(song['duration']) if song['duration'] else '-'}s")
    print(f"   üìä {color('Bitrate:', Colors.BOLD)} {song.get('bitrate', '-')} kbps")
    print(f"   üì¶ {color('Tama√±o:', Colors.BOLD)} {song['size'] // 1024} KB\n")

# ===== REPRODUCCI√ìN =====
def play_song(file_path):
    """Reproduce multiplataforma con ffplay si est√° disponible"""
    if not check_ffplay():
        print(color("‚ö†Ô∏è  ffplay no est√° instalado.", Colors.RED))
        install = input("¬øInstalar FFmpeg? (s/n): ").lower()
        if install == 's':
            if install_ffmpeg_tools():
                return play_song(file_path)
        return
    
    print(color(f"üéß Reproduciendo: {os.path.basename(file_path)}", Colors.GREEN))
    try:
        if IS_WINDOWS:
            subprocess.run(['ffplay', '-nodisp', '-autoexit', file_path], 
                          stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
        else:
            subprocess.run(['ffplay', '-nodisp', '-autoexit', file_path], 
                          stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    except Exception:
        print(color("‚ùå Error al reproducir la canci√≥n.", Colors.RED))

# ===== INTERFAZ DE USUARIO MEJORADA =====
def print_banner():
    # Verificar actualizaciones al inicio
    if updater.check_for_updates():
        version_info = color(f"v{VERSION} ‚Üí v{updater.new_version}", Colors.GREEN)
    else:
        version_info = color(f"v{VERSION} (Actualizado)", Colors.GREEN)
    
    banner = f"""{Colors.CYAN}{Colors.BOLD}
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                esVintable Ultimate PRO {version_info:<20} ‚ïë
‚ïë         B√∫squeda Avanzada & Descarga por ISRC                ‚ïë
‚ïë           GitHub.com/JesusQuijada34/esvintable               ‚ïë
‚ïë           Plataforma: {color(PLATFORM_LABEL, Colors.YELLOW):<20}                   ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
{Colors.END}"""
    print(banner)
    
    # Mostrar estado de actualizaciones
    if updater.update_available:
        print(color(f"üîÑ Actualizaci√≥n disponible: v{updater.new_version}", Colors.GREEN))
        if updater.update_info.get('critical', False):
            print(color("üö® ACTUALIZACI√ìN CR√çTICA: Se recomienda actualizar inmediatamente", Colors.RED))

def print_guide():
    print(color("üõ†Ô∏è  GU√çA R√ÅPIDA:", Colors.YELLOW))
    print("1. üîç Buscar canciones por metadatos (t√≠tulo, artista, √°lbum, ISRC)")
    print("2. üè∑Ô∏è  Buscar ISRC espec√≠fico en directorios")
    print("3. üì• Descargar canciones por c√≥digo ISRC")
    print("4. üéß Reproducir archivos de audio")
    print("5. üåê B√∫squeda en servicios de m√∫sica")
    print("6. üìÅ Navegador de archivos")
    print("7. üîÑ Verificar actualizaciones")
    print("8. ‚öôÔ∏è  Instalar herramientas")
    print("9. ‚ùå Salir\n")

def main_menu():
    clear()
    print_banner()
    print_guide()
    
    options = [
        "üîç Buscar canciones por metadatos",
        "üè∑Ô∏è Buscar por ISRC espec√≠fico",
        "üì• Descargar por ISRC",
        "üéß Reproducir canci√≥n",
        "üåê Buscar en servicios de m√∫sica",
        "üìÅ Navegador de archivos",
        "üîÑ Verificar actualizaciones",
        "‚öôÔ∏è Instalar herramientas",
        "‚ùå Salir"
    ]
    
    for i, option in enumerate(options, 1):
        print(color(f"{i}. {option}", Colors.BOLD))
    
    print()
    return input("Selecciona una opci√≥n: ").strip()

def search_by_metadata_menu():
    clear()
    print(color("üîé B√∫squeda por Metadatos", Colors.BOLD))
    print("Deja vac√≠o cualquier campo para ignorarlo.")
    
    filters = {
        'title': input("T√≠tulo: ").strip(),
        'artist': input("Artista: ").strip(),
        'album': input("√Ålbum: ").strip(),
        'isrc': input("ISRC: ").strip(),
    }
    
    # Usar navegador de archivos para seleccionar directorio
    print("\nSelecciona el directorio a buscar:")
    directory = file_browser()
    if directory is None:
        return
    
    if not os.path.isdir(directory):
        print(color("‚ùå El directorio no existe.", Colors.RED))
        time.sleep(2)
        return
    
    print(color("‚è≥ Buscando canciones...", Colors.CYAN))
    found = filter_songs(directory, filters)
    
    if found:
        print(color(f"\nüé∂ Se encontraron {len(found)} canciones:", Colors.GREEN))
        for i, song in enumerate(found, 1):
            print(color(f"{i}.", Colors.WHITE))
            show_song(song)
        
        # Opci√≥n para reproducir
        play = input("¬øReproducir alguna? N√∫mero o Enter para omitir: ").strip()
        if play.isdigit() and 1 <= int(play) <= len(found):
            play_song(found[int(play)-1]['file'])
    else:
        print(color("‚ùå No se encontraron canciones con esos filtros.", Colors.RED))
    
    input("\n‚èé Enter para continuar...")

def search_by_isrc_menu():
    clear()
    print(color("üè∑Ô∏è B√∫squeda por ISRC", Colors.BOLD))
    
    isrc_code = input("Introduce el c√≥digo ISRC: ").strip().upper()
    if not re.match(r'^[A-Z]{2}[A-Z0-9]{3}\d{5}$', isrc_code):
        print(color("‚ùå Formato ISRC inv√°lido.", Colors.RED))
        time.sleep(2)
        return
    
    # Usar navegador de archivos para seleccionar directorio
    print("\nSelecciona el directorio a buscar:")
    directory = file_browser()
    if directory is None:
        return
    
    if not os.path.isdir(directory):
        print(color("‚ùå El directorio no existe.", Colors.RED))
        time.sleep(2)
        return
    
    print(color("‚è≥ Buscando ISRC...", Colors.CYAN))
    found = search_isrc_in_directory(directory, isrc_code)
    
    if found:
        print(color(f"\n‚úÖ Se encontraron {len(found)} archivos con ISRC {isrc_code}:", Colors.GREEN))
        for i, song in enumerate(found, 1):
            print(color(f"{i}.", Colors.WHITE))
            show_song(song)
        
        # Opci√≥n para reproducir
        play = input("¬øReproducir alguna? N√∫mero o Enter para omitir: ").strip()
        if play.isdigit() and 1 <= int(play) <= len(found):
            play_song(found[int(play)-1]['file'])
    else:
        print(color(f"‚ùå No se encontraron archivos con ISRC {isrc_code}", Colors.RED))
    
    input("\n‚èé Enter para continuar...")

def download_by_isrc_menu():
    clear()
    print(color("üì• Descargar por ISRC", Colors.BOLD))
    
    isrc_code = input("Introduce el c√≥digo ISRC: ").strip().upper()
    if not re.match(r'^[A-Z]{2}[A-Z0-9]{3}\d{5}$', isrc_code):
        print(color("‚ùå Formato ISRC inv√°lido.", Colors.RED))
        time.sleep(2)
        return
    
    # Usar navegador de archivos para seleccionar directorio de descarga
    print("\nSelecciona el directorio de descarga:")
    output_dir = file_browser()
    if output_dir is None:
        output_dir = "descargas_isrc"
    
    success, filename = download_by_isrc(isrc_code, output_dir)
    if success:
        print(color(f"‚úÖ Descarga completada: {filename}", Colors.GREEN))
        
        # Preguntar si reproducir
        play = input("¬øReproducir descarga? (s/n): ").lower()
        if play == 's':
            play_song(filename)
    else:
        print(color("‚ùå No se pudo descargar el archivo.", Colors.RED))
    
    input("\n‚èé Enter para continuar...")

def play_song_menu():
    clear()
    print(color("üéß Reproducir Canci√≥n", Colors.BOLD))
    
    # Usar navegador de archivos para seleccionar archivo
    print("Selecciona el archivo de audio:")
    path = file_browser()
    if path is None or not os.path.isfile(path):
        print(color("‚ùå Archivo no v√°lido.", Colors.RED))
        time.sleep(2)
        return
    
    if not path.lower().endswith(SUPPORTED_AUDIO):
        print(color("‚ùå Formato de audio no soportado.", Colors.RED))
        time.sleep(2)
        return
    
    # Mostrar metadatos antes de reproducir
    print(color("\nüìã Metadatos del archivo:", Colors.CYAN))
    info = deep_scan_audio(path)
    show_song(info)
    
    play_song(path)
    input("\n‚èé Enter para continuar...")

def external_search_menu():
    clear()
    print(color("üåê B√∫squeda en Servicios de M√∫sica", Colors.BOLD))
    
    query = input("T√©rmino de b√∫squeda: ").strip()
    if not query:
        print(color("‚ùå Debes introducir un t√©rmino de b√∫squeda.", Colors.RED))
        time.sleep(2)
        return
    
    service = input("Servicio (deezer/soundcloud/bandcamp/archive/all): ").strip().lower() or "all"
    
    results = search_music_services(query, service)
    
    if results:
        for service_name, service_results in results.items():
            print(color(f"üéµ Resultados de {service_name.capitalize()} ({len(service_results)}):", Colors.GREEN))
            for i, result in enumerate(service_results[:5], 1):
                print(f"   {i}. {result}")
            print()
    else:
        print(color("‚ùå No se encontraron resultados.", Colors.RED))
    
    input("\n‚èé Enter para continuar...")

def file_browser_menu():
    clear()
    print(color("üìÅ Navegador de Archivos", Colors.BOLD))
    
    selected = file_browser()
    if selected:
        if os.path.isfile(selected):
            print(color(f"\nüìÑ Archivo seleccionado: {selected}", Colors.GREEN))
            # Mostrar metadatos
            info = deep_scan_audio(selected)
            show_song(info)
            
            # Opciones para archivos de audio
            if selected.lower().endswith(SUPPORTED_AUDIO):
                play = input("¬øReproducir? (s/n): ").lower()
                if play == 's':
                    play_song(selected)
        else:
            print(color(f"\nüìÇ Directorio seleccionado: {selected}", Colors.GREEN))
        
        input("\n‚èé Enter para continuar...")

def update_menu():
    clear()
    print(color("üîÑ Sistema de Actualizaciones", Colors.BOLD))
    
    if updater.check_for_updates():
        print(color(f"üéâ ¬°Nueva versi√≥n disponible! v{VERSION} ‚Üí v{updater.new_version}", Colors.GREEN))
        print(color(f"üìÖ Fecha de lanzamiento: {updater.update_info.get('release_date', 'Desconocida')}", Colors.CYAN))
        print(color(f"üìã Cambios:\n{updater.update_info.get('changelog', 'No disponible')}", Colors.WHITE))
        
        if updater.update_info.get('critical', False):
            print(color("üö® ACTUALIZACI√ìN CR√çTICA: Se recomienda actualizar inmediatamente", Colors.RED))
        
        confirm = input("\n¬øActualizar ahora? (s/n): ").lower()
        if confirm == 's':
            print(color("‚è≥ Descargando actualizaci√≥n...", Colors.YELLOW))
            if updater.download_update():
                print(color("‚úÖ ¬°Actualizaci√≥n completada!", Colors.GREEN))
                print(color("üîÑ Reiniciando aplicaci√≥n...", Colors.CYAN))
                time.sleep(2)
                os.execv(sys.executable, [sys.executable] + sys.argv)
            else:
                print(color("‚ùå Error al descargar la actualizaci√≥n.", Colors.RED))
    else:
        print(color("‚úÖ Ya tienes la √∫ltima versi√≥n.", Colors.GREEN))
    
    input("\n‚èé Enter para continuar...")

def tools_menu():
    clear()
    print(color("‚öôÔ∏è Herramientas del Sistema", Colors.BOLD))
    
    print("1. Verificar/Instalar dependencias")
    print("2. Verificar/Instalar FFmpeg (ffprobe, ffplay)")
    print("3. Verificar conexi√≥n a internet")
    print("4. Volver")
    
    choice = input("\nSelecciona una opci√≥n: ").strip()
    
    if choice == "1":
        print(color("üîç Verificando dependencias...", Colors.YELLOW))
        check_dependencies()
        input("\n‚èé Enter para continuar...")
    elif choice == "2":
        print(color("üîç Verificando FFmpeg...", Colors.YELLOW))
        if check_ffprobe() and check_ffplay():
            print(color("‚úÖ FFmpeg ya est√° instalado.", Colors.GREEN))
        else:
            install_ffmpeg_tools()
        input("\n‚èé Enter para continuar...")
    elif choice == "3":
        print(color("üåê Verificando conexi√≥n a internet...", Colors.YELLOW))
        try:
            requests.get("https://www.google.com", timeout=5)
            print(color("‚úÖ Conexi√≥n a internet funcionando.", Colors.GREEN))
        except:
            print(color("‚ùå Sin conexi√≥n a internet.", Colors.RED))
        input("\n‚èé Enter para continuar...")

# ===== MAIN =====
def main():
    # Verificar dependencias al inicio
    if not check_dependencies():
        print(color("‚ùå No se pudieron instalar las dependencias necesarias.", Colors.RED))
        input("Presiona Enter para salir...")
        return
    
    # Iniciar verificador de actualizaciones en segundo plano
    updater.start_update_checker()
    
    # Bucle principal
    while True:
        try:
            option = main_menu()
            
            if option == "1":
                search_by_metadata_menu()
            elif option == "2":
                search_by_isrc_menu()
            elif option == "3":
                download_by_isrc_menu()
            elif option == "4":
                play_song_menu()
            elif option == "5":
                external_search_menu()
            elif option == "6":
                file_browser_menu()
            elif option == "7":
                update_menu()
            elif option == "8":
                tools_menu()
            elif option == "9":
                print(color("üëã ¬°Hasta pronto!", Colors.CYAN))
                updater.stop_update_checker()
                break
            else:
                print(color("‚ùå Opci√≥n inv√°lida.", Colors.RED))
                time.sleep(1)
        except KeyboardInterrupt:
            print(color("\nüëã ¬°Hasta pronto!", Colors.CYAN))
            updater.stop_update_checker()
            break
        except Exception as e:
            print(color(f"‚ùå Error inesperado: {e}", Colors.RED))
            time.sleep(2)

if __name__ == "__main__":
    main()